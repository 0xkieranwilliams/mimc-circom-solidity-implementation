// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

contract Hasher {

    uint256 p = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint8 nRounds = 10;
    uint256[10] c = [
        0,
        81267508508943089542119141718816171702175751362421721808008409724587372567402,
        82549416809288341021702880577288618629374489033499052253782142246114419665341,
        109206284254671900743241533452377855708054610592542125593627602217146010682341,
        97047473353828477906743361674888655662363010779317563554348250689346499297972,
        20722874102262470813003450073921050537631911991474070577892306508679922985455,
        15868405948871687681468472844859228477017686626681393981606220840125262862832,
        113852166332449360953358404408849594476139010360220012333816529059971948242799,
        3313407124743833025119320838366173902545221821190252740799359315412938037078,
        103045447348244353507405560235128465894423923102745658092443851834739387598373
    ];

    function MiMC5(uint256 x, uint256 k) public view returns(uint256 h) {
        uint256 lastOutput = x;
        uint256 base;
        uint256 base2;
        uint256 base4;

        for (uint8 i = 0; i < nRounds; i++) {
            base = addmod(lastOutput, k, p);
            base = addmod(base, c[i], p);

            base2 = mulmod(base, base, p);
            base4 = mulmod(base2, base2, p);

            lastOutput = mulmod(base4, base, p);
        }
        h = addmod(lastOutput, k, p);
    }
}
